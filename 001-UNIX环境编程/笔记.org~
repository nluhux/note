UNIX文件系统的起点是被称为根(root)的目录，这个目录的名称是一个字符:"/"
目录是一个包含目录项的文件。
目录汇中的各个名字被称为文件名，只有斜线和空字符这个两个字符不能出现在文件名中。
斜线用于分割构成路径的各文件名，空字符则用来终止一个路径名。
创建新目录的时候会自动创建两个文件名: . 点 和 .. 点点 点指向当前目录，点点指向父目录。
在最高层次的目录中 点点和点相同。
由斜线风格的一个或多个文件名组成的序列(可以以斜线开头)构成路径名
以斜线靠头的路径名被称为绝对路径名，否则称为相对路径名。
相对路径指向相对于当前目录的文件。
文件系统根的名字(/)是一个特殊的绝对路径名，它不包含文件名。
每个进程都有一个工作目录(working directory), 有时称为当前工作目录(current working directory)
所有相对路径名都从工作目录开始解释。进程可以用chdir函数更改其工作目录.
登录的时候，工作目录被设置为起始目录(home directory).
文件描述符(file descriptor)通常是一个小的非负整数，内核用以表示一个特定进程正在访问的文件。
当内核打开一个现有文件或创建一个新文件时，它都会返回一个文件描述符，在读写文件时候使用这个描述符。
按照惯例，每当运行一个新程序的时候，所有的shell都会为其打开3个文件描述符号:
标准输入(stdin)，标准输出(stdout)，错误输出(stderr)。
如果不做特殊处理，则这3个描述符都指向终端。
函数open,read,write,lseek,close提供了不带缓冲的I/O。这些函数都使用文件描述符。
read函数返回读取的字节数，到达读取文件的尾部时，read返回0。如果发生一个读错误，read返回-1。
程序是一个存储在磁盘上某个目录中的可指向文件，内核使用exec函数(7个exec函数之一)，将文件读入内存，并执行程序。
程序的执行实例被称为进程(process)，unix系统保证每个进程都有一个唯一的数字标识符，被称为进程ID(process ID)，进程ID总是一个非负整数。
有3个用于进程控制的主要函数，fork,exec,和waitpid(exec函数有7种变体，但通常把他们统称exec函数).
函数fgets从标准输入一次读取一行，当键入输入文件结束符(通常为Ctrl+D)作为行的第一个字符的时候，fgets返回一个NULL指针.
execlp函数要求的参数是以NULL结束而不是换行结束。
调用fork函数创建一个新进程，新进程是调用进程的一个副本，我们称调用进程为父进程，新创建的进程为子进程。
fork对父进程返回新的子进程的进程ID(一个非负整数)对子进程则返回0.因为fork创建一个新进程，所以说它被调用一次(由父进程)，但是返回两次(分别在父进程中和子进程中)。
父进程等待子进程结束是使用调用waitpid函数实现的。
一个进程内的所有线程(thread)共享同一地址空间，文件描述符，栈以及与进程相关的属性。因为它们能访问同一存储区，所以各线程在访问共享数据的时候需要采取同步措施以避免不一致性.
与进程相同，线程也用ID标识，但是，线程ID只在它所属的进程内起作用。当在一个进程中对某个特定线程进行处理时，我们可以使用该线程的ID引用它。
当UNIX系统函数出错时，通常会返回一个值，而整型变量errno通常被设置为具有特定信息的值。
在Linux系统中，出错常量在errno(3)手册中列出.
POSIX和ISO C中将errno定义为一个符号，它扩展为一个可修改的整形左值(lvalue)。它可以是一个包含出错编号的整数，也可以是一个返回出错编号指针的函数。
在支持线程的环境中，多个线程共享进程地址空间，每个线程都有属于它自己的局部errno变量以避免一个线程干扰另一个线程。
对于errno应当注意:
1. 如果没有出错，其值不会被例程清楚，因此，仅当函数的返回值指明出错时，才检验其值。
2. 任何函数都不会将<errno.h>值设置为0，而且在errno.h中定义的所有常量都不为0。
C标准定义了两个函数用于打印出错信息: strerror,perror.
可以将在<errno.h>定义的各种出错分为两类:致命性错误和非致命性错误，对于致命性的错误，无法执行恢复动作。最多只能打印一条出错信息或将一条出错消息写入日志文件，然后退出。
对于非致命性的错误，有时可以较为妥善的进行处理，大多数非致命性出错是暂时的(例如资源短缺).
信号(signal)用于通知进程发生了某种情况。
进程有3种处理信号的方式。
1. 忽略信号，不推荐这种处理方式，因为有些信号代表硬件异常，例如访问进程地址空间之外的存储单元。
2. 按照系统默认方式处理。
3. 提供一个函数，信号发生的时候调用该函数。被称为捕捉该信号。
终端键盘上有两种产生信号的方法，分别称为中断键(Ctrl+C)和退出键(Ctrl+\)
可以用kill函数从一个进程给另一个进程发送信号。
