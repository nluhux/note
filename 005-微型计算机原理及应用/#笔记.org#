* 真值

+11121

* 无符号数制的转换

** 十进制数转换二进制数

使用2连续除以十进制数直至高为0为止，逆序排列余数。

实例过程:
#+BEGIN_SRC text
  10 -> 1010
     10 / 2 = 5 余 0
     5  / 2 = 2 余 1
     2  / 2 = 1 余 0
     1  / 2 = 0 余 1

     1010
#+END_SRC

** 十进制小数转换为二进制数


连续用2去乘十进制小数，直至乘积的小数部分等于0，顺序排列每次乘积的整数部分。

实例过程:
#+BEGIN_SRC text
  0.8125 -> 0.1101
	 0.8125 * 2 = 1.625 整数 1
	 0.625  * 2 = 1.25  整数 1
	 0.25   * 2 = 0.5   整数 0
	 0.5    * 2 = 1     整数 1

	 1101

#+END_SRC

** 二进制数转十进制数

从右到左用二进制的每个数去乘以2的相应次方

#+BEGIN_SRC text
  101011
	  1 * 2^0 = 1
	  1 * 2^1 = 2
	  0 * 2^2 = 0
	  1 * 2^3 = 8
	  0 * 2^4 = 0
	  1 * 2^5 = 32

	  1 + 2 + 8 + 32 = 43
#+END_SRC

** 二进制小数转十进制小数

从小数点后开始从左到右 依次乘以2的负1次方，二的负2次方....

注意: 从-1次方开始

#+BEGIN_SRC text
  0.001
	  0 * 2^(-1) = 0
	  0 * 2^(-2) = 0
	  1 * 2^(-3) = 0.125

	  0.125

	  0.125

#+END_SRC






* 带符号数的表示

** 机器数

把一个数及其符号在机器中的表示加以数值化，这样的数称为机器数，而机数所代表的数称为该机器数的真值

正值符号位为 0

负值符号位为 1

** 原码

1. 正值为本身
   
正10

| 符号位 |   |   |   |   |   |   |   |
|--------+---+---+---+---+---+---+---|
|      0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 |

2. 负数的原码表示，除符号为1外，其余各数值原样

负10
| 符号位 |   |   |   |   |   |   |   |
|--------+---+---+---+---+---+---+---|
|      1 | 0 | 0 | 0 | 1 | 0 | 1 | 0 |

原码范围:

-127 ~ +127

** 反码

1. 反码正值为本身

正10
| 符号位 |   |   |   |   |   |   |   |
|--------+---+---+---+---+---+---+---|
|      0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 |

2. 负数的反码表示，除符号为1外，其余各数值是按位取反

负10

| 符号位 |   |   |   |   |   |   |   |
|--------+---+---+---+---+---+---+---|
|      1 | 1 | 1 | 1 | 0 | 1 | 0 | 1 |

原码范围:

8 位: -127 ~ +127

** 补码

1. 补码正值为本身


| 符号位 |   |   |   |   |   |   |   |
|--------+---+---+---+---+---+---+---|
|      0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 |

2. 负数的补码表示，除符号为1外，其余各数值位按位取反再加1

| 符号位 |   |   |   |   |   |   |   |
|--------+---+---+---+---+---+---+---|
|      1 |1  |1  |1  |0  |1  |1  |0  |

真值和补码转换公式: |X|=|X|补+1

补码范围:

8 位: -128 ~ +127

补码的加法: [X+Y]补 = [X]补+[Y]补
补码的减法: [X-Y]补 = [X]补+[-Y]补

计算机使用补码的根本原因是只拿加法器就可以解决加法和减法


* 8086/8088功能结构

总线接口单元 BIU bus interface unit
根据EU的请求负责完成CPU与存储器、IO设备之间的数据传送

执行单元 EU execution unit
从BIO的指令队列中取出指令代码，然后执行指令所规定的全部功能

