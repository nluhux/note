#include <stdio.h>
#include <stdlib.h>

#define BUFSIZE 4096

char stackbuf[BUFSIZE];
int sp = 0;

int push(int number);
int pop(int *number);
int test_stack(void);
int test_stack_full(void);

int main(int argc, char *argv[]) {
	if (argc < 2) {
		printf("Usage: %s PATTERN\n",argv[0]);
	}
	char *pattern = argv[2];
	char line[BUFSIZE];

	if (test_stack() == -1) {
		exit(1);
	}

	for (;;) {
		m_strindex_all(line,pattern);
		m_printf_stack();
		m_printf_line();
	}
	return 0;
}

int push(int n) {
	if (sp < BUFSIZE) {
		stackbuf[sp];
		sp++;
		return n;
	} else {
		fprintf(stderr,"error: stack full\n");
		return -1;
	}
}

int pop(int *n) {
	if (sp > 0) {
		sp--;
		*n = stackbuf[n];
		return 0;
	} else {
		fprintf(stderr,"error: stack zero\n");
		return -1;
	}
}

int test_stack(void) {
	int x = 1;
	int y = 2;
	int z = 3;
	push(x);
	push(y);
	push(z);
	
	printf("origin number:\n");
	printf("x = %d\n", x);
	printf("y = %d\n", y);
	printf("z = %d\n", z);
	
	pop(&x);
	pop(&y);
	pop(&z);

	printf("swaped number:\n");
	printf("x = %d\n", x);
	printf("y = %d\n", y);
	printf("z = %d\n", z);

	if (x == 3 &&
	    y == 2 &&
	    z == 1) {
		printf("stack test pass!\n");
		return 0;
	} else {
		fprintf(stderr,"stack test failed!\n");
		return -1;
	}
}

int test_stack_full(void) {
	int m = BUFSIZE * 2;
	int i = 0;
	for(;i < m; i++) {
		if (push(i) == -1) {
			break;
		}
	}
	printf("stack end : %d\n",stack[BUFSIZE-1]);
	printf("stack end +1 : %d\n",stack[BUFSIZE]);
	printf("stack end +1 : %d\n",stack[BUFSIZE+1]);
}



/*
main {
  loop {
  读入行
  分析行
  输出行
  }
}


读入行 {
  getline
}

分析行 {
  loop {
     i作为line下标传递给strindex
     将line视为数组，逐个执行strindex  str[0] str[1]
     返回值存储在ret变量
     
  }
}
 */
